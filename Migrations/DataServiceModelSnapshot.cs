// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using arnold.Services;

#nullable disable

namespace arnold.Migrations
{
    [DbContext(typeof(DataService))]
    partial class DataServiceModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("arnold.Models.FileAttribute", b =>
                {
                    b.Property<long>("AttributeId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("FileId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("FileMetadataId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AttributeId", "FileId");

                    b.HasIndex("FileMetadataId");

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("arnold.Models.FileAttributeDefinition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AttributeDefinitions");
                });

            modelBuilder.Entity("arnold.Models.FileLibrary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Libraries");
                });

            modelBuilder.Entity("arnold.Models.FileMetadata", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("LibraryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.ToTable("Metadata");
                });

            modelBuilder.Entity("arnold.Models.FileMonitor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Directory")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsInclusionRule")
                        .HasColumnType("INTEGER");

                    b.Property<long>("LibraryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Recurse")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Rule")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.ToTable("Monitors");
                });

            modelBuilder.Entity("arnold.Models.FileTag", b =>
                {
                    b.Property<long>("FileId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tag")
                        .HasColumnType("TEXT");

                    b.HasKey("FileId", "Tag");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("arnold.Models.FileAttribute", b =>
                {
                    b.HasOne("arnold.Models.FileAttributeDefinition", "Definition")
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("arnold.Models.FileMetadata", null)
                        .WithMany("Attributes")
                        .HasForeignKey("FileMetadataId");

                    b.Navigation("Definition");
                });

            modelBuilder.Entity("arnold.Models.FileMetadata", b =>
                {
                    b.HasOne("arnold.Models.FileLibrary", null)
                        .WithMany("Files")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("arnold.Models.FileMonitor", b =>
                {
                    b.HasOne("arnold.Models.FileLibrary", "Library")
                        .WithMany("Monitors")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");
                });

            modelBuilder.Entity("arnold.Models.FileTag", b =>
                {
                    b.HasOne("arnold.Models.FileMetadata", null)
                        .WithMany("Tags")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("arnold.Models.FileLibrary", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("Monitors");
                });

            modelBuilder.Entity("arnold.Models.FileMetadata", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
